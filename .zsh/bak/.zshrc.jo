# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zsh/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# ${ZDOTDIR:-$HOME}/.zshrc

###################################################################
# ~~~ PATH ~~~ ####################################################
###################################################################
local PATH="/var/lib/flatpak/locals/share:$PATH"
local PATH="$HOME/.local/share/flatpak/locals/share:$PATH"
local PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"
local PATH="$HOME/.local/bin:$PATH "
local PATH="$HOME/.local/go/bin:$PATH"
local PATH="$HOME//bin:$PATH "
local PATH="/usr/local/bin:/bin:/usr/bin:$PATH"
local PATH="/qq/lib/code/shell/snippets:$PATH"
#local ANDROID_HOME=$HOME/Android/Sdk
#local PATH=$PATH:$ANDROID_HOME/tools
#local PATH=$PATH:$ANDROID_HOME/platform-tools

#local PATH="$HOME/.local/bin:$PATH"
#local PATH="/qq/lib/code/shell/snippets:$PATH"
#local PATH="/qq/dev/build/bash:$PATH"
TERM="xterm-256color" 

# ~~~ ~/.zsh ~~~
ZDOTCONFIGDIR=${ZDOTDIR}/config
ZDOTPLUGINSDIR=${ZDOTDIR}/plugins
ZFUNC=${ZDOTDIR}/zfunc
ZCOMPLETION=${ZDOTDIR}/completion





###### zi #############################################################
# ~~~ programms ~~~ ###############################################
ZIENABLE=TRUE

if [[ "$ZIENABLE" == "TRUE" ]]; then 

#source <(curl -sL init.zshell.dev); zzinit
sh -c "$(curl -fsSL get.zshell.dev)" -- -a loader
#zi pack for zsh

#zi pack"5.9" for zsh

# package
zi pack for fzf
zi pack for fzy 
zi pack for ls_colors


# theme 
zi light-mode for @romkatv/powerlevel10k
fi










#zinit load ellie/atuin

zi pack for zsh
#zi wait pack atload=+"zicompinit; zicdreplay" for system-completions

#zi pack for system-completions
# DEVOPS ============================================================================================================ #
#zi has'svn' blockf for svn \
#  id-as'user:aliases' multisrc'{general,edit}.zsh' pick'/dev/null' \
#    https://github.com/ss-o/dotfiles/trunk/sync/zsh/aliases/user
# ANNEX ============================================================================================================== #
#zi light-mode compile'functions/.*za-*~*.zwc' for z-shell/z-a-meta-plugins @annexes \
#  atinit'Z_A_USECOMP=1' compile'functions/.*ev*~*.zwc' z-shell/z-a-eval
# META-PLUGINS ======================================================================================================= #
#zi lucid for light-mode \
#  skip'F-Sy-H' @z-shell @romkatv \
#  skip'dircolors-material ripgrep peco tig hexyl bat hyperfine fd' @console-tools \
#  skip'fzy peco skim' @fuzzy \
#  @zsh-users+fast
# OH-MY-ZSH LIBRARY ================================================================================================== #
#sni=({git,clipboard}.zsh)
#zi is-snippet has'svn' svn multisrc'${sni[*]}' pick'/dev/null' for \
#    OMZ::lib; unset sni
# OH-MY-ZSH PLUGINS ================================================================================================== #
#zi-turbo '0a' for \
#  atload"unalias grv g" OMZP::git OMZP::systemd \
#    if'[[ -d ~/.gnupg ]]' OMZP::gpg-agent \
#    if'[[ -d ~/.ssh ]]' silent OMZP::ssh-agent
# PLUGINS ============================================================================================================ #
#zi ice as"completion"
#zi snippet OMZP::docker/_docker

#zi ice as"completion"
#zi snippet OMZP::fd/_fd

#zi ice as"completion"
#zi snippet OMZP::ag/_ag
# Programs
#zi ice lucid wait as'program' from"gh-r" has'fzf'
#  zi light denisidoro/navi
#zi ice from'gh-r' as'program'
#  zi light junegunn/fzf
#zi ice from'gh-r' as'program' mv'fd* fd' sbin'**/fd(.exe|) -> fd'
#  zi light @sharkdp/fd
#zi ice from'gh-r' as'program' mv'bat* bat' sbin'**/bat(.exe|) -> bat'
#  zi light @sharkdp/bat
#zi ice lucid wait as'program' has'bat' pick'src/*'
#  zi light eth-p/bat-extras
#zi ice from"gh-r" as'program' mv'docker* -> docker-compose'
#  zi light docker/compose
#zi ice lucid wait as'program' has'perl' has'convert' pick'exiftool'
#  zi light exiftool/exiftool
#zi ice if'[ -z "$SSH_CONNECTION" ]' lucid wait \
#  as'program' has'perl' pick'inxi'
#  zi light smxi/inxi
#zi ice lucid wait as'program' pick'prettyping' has'ping'
#  zi light denilsonsa/prettyping
#zi ice lucid wait as'program' pick'neofetch' \
#  atclone"cp neofetch.1 $ZI[MAN_DIR]/man1" atpull'%atclone'
#  zi light dylanaraps/neofetch
#zi ice atclone'PYENV_ROOT="$PWD" ./libexec/pyenv init - > zpyenv.zsh' \
#  atinit'local PYENV_ROOT="$PWD"' atpull"%atclone" \
#  as'program' pick'bin/pyenv' src"zpyenv.zsh" nocompile'!'
#  zi light pyenv/pyenv


# OMZL
# | clipcopy    - copies stdin to clipboardf
#clipcopy <file>         - copies a file's contents to clipboard
#clippaste - "Paste" data from clipboard to stdout
#zi snippet OMZL::clipboard.zsh




#zi ice svn
#zi snippet PZTM::tmux
#
#  zi light zsh-users/zsh-autosuggestions
#  #zi light ellie/atuin
#  zi light zdharma/fast-syntax-highlighting
#
# Amnex
#zi light z-shell/z-a-rust

  #bindkey
bindkey "^[[1;5D" beginning-of-line       # CTRL + <
bindkey "^[OH"    beginning-of-line       # HOME
bindkey "^[[1;5C" end-of-line             # CTRL + >
bindkey "^[OF"    end-of-line             # END
bindkey "^[[1;3D" backward-word           # ALT  + <
bindkey "^[[1;3C" forward-word            # ALT  + >
bindkey "^[[3~"   delete-char             # DELETE
bindkey "^[[A"    history-search-backward # up   arrow
bindkey "^[[B"    history-search-forward  # down arrow
bindkey "^[[2~"   overwrite-mode          # Insert

bindkey '^[h'     backward-word           # Alt + hd
bindkey '^[l'     forward-word            # Alt + l
bindkey '^[j'     backward-char           # Alt + j
bindkey '^[k'     forward-char            # Alt + k
 
bindkey '^[y'     backward-delete-word    # Alt + y
bindkey '^[o'     delete-word             # Alt + o
bindkey '^[u'     backward-delete-char    # Alt + u
bindkey '^[i'     delete-char             # Alt + i

bindkey '^[^H'    backward-delete-word    # Ctrl + h
bindkey '^[^L'    delete-word             # Ctrl + l
bindkey '^[y'     redo                    # Alt + y
bindkey '^[z'     undo                    # Alt + z
bindkey '^L'      clear-screen            # Ctrl + l

# showkey -a  
bindkey '^[[1~' beginning-of-line
bindkey '^[[4~' end-of-line



eval "$(atuin init zsh)"

alias dot='git --git-dir=$HOME/.dotfiles --work-tree=$HOME'


###################################################################
# ~~~ env ~~~ #####################################################
###################################################################
local LANG="de_DE.UTF-8"
local DATUM=$(date "+%Y%m%d") #20220307
local DATUMUHRZEIT=$(date +%Y%m%d_%H:%M) #20220307_00:25
#local ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#ff00ff,bg=cyan,bold,underline"

# ~~~ Default programs ~~~ 
[ -n "$DISPLAY" ] && local VISUAL="codium"     
[ -n "$DISPLAY" ] && local MDEDITOR="marktext"        || local BROWSER="nano"
[ -n "$DISPLAY" ] && local BROWSER="firefox"          || local BROWSER="lynx"
[ -n "$DISPLAY" ] && local NB_GUI_BROWSER="firefox"   || local BROWSER="lynx"
[ -n "$DISPLAY" ] && local IMAGEVIEWER="shotwell"     || local BROWSER="shotwell"

# ~~~ standart öffnen mit ~~~
alias -s {index}="$BROWSER"
alias -s {txt,md}="$MDEDITOR"
alias -s {gif,GIF,jpeg,JPEG,jpg,JPG,png,PNG}="$IMAGEVIEWER"
# Set preferred editor for specific files: 
alias -s {cs,ts,html,json,xml,md}=code

###################################################################
# ~~~ autoload ~~~ ################################################
###################################################################

# ~~~ Load more completions ~~~ 
fpath=($ZDOTDIR/completion $fpath)

# ~~~ Should be called before compinit ~~~ 
zmodload zsh/complist

for file in $ZDOTCONFIGDIR/**/*(.N)
do 
    source "$file" > /dev/null 2>&1 #&& echo "config file load: $file"
done


# ~~~ zsh funktionen ~~~
for file in $ZFUNC/**/*(.N)
do 
    source "$file"  #&& echo "zfunc file load: $file"
done

# ~~~ all of our zsh files ~~~
typeset -U config_files
config_files=($ZDOTDIR/**/*.zsh)


# ~~~ aliasexpand ~~~   CTRL+A
zle -C alias-expension complete-word _generic
bindkey '^a' alias-expension
zstyle ':completion:alias-expension:*' completer _expand_alias

# ~~~ Abschluss ohne Berücksichtigung der Groß-/Kleinschreibung ~~~
zstyle ':completion:*' matcher-list 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]} l:|=* r:|=*' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]} l:|=* r:|=*' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]} l:|=* r:|=*'


# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
  zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time


# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# ~~~ Autocomplete ~~~ 
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#073642,bg=#839496,bold,underline"
ZSH_AUTOSUGGEST_STRATEGY=(history completion)

# ~~~ Highlight the current autocomplete option ~~~ 
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"

# ~~~ Better SSH/Rsync/SCP Autocomplete ~~~ 
zstyle ':completion:*:(scp|rsync):*' tag-order ' hosts:-ipaddr:ip\ address hosts:-host:host files'
zstyle ':completion:*:(ssh|scp|rsync):*:hosts-host' ignored-patterns '*(.|:)*' loopback ip6-loopback localhost ip6-localhost broadcasthost
zstyle ':completion:*:(ssh|scp|rsync):*:hosts-ipaddr' ignored-patterns '^(<->.<->.<->.<->|(|::)([[:xdigit:].]##:(#c,2))##(|%*))' '127.0.0.<->' '255.255.255.255' '::1' 'fe80::*'

# ~~~ fzf -tab gänge configs ~~~
# disable sort when completing `git checkout`
  #zstyle ':completion:*:git-checkout:*' sort false
# set descriptions format to enable group support
  #zstyle ':completion:*:descriptions' format '[%d]'
# set list-colors to enable filename colorizing
  zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
# preview directory's content with exa when completing cd
  zstyle ':fzf-tab:complete:cd:*' fzf-preview 'exa -1 --color=always $realpath'
# switch group using `,` and `.`
  zstyle ':fzf-tab:*' switch-group ',' '.'

# ~~~ Allow for autocomplete to be case insensitive ~~~ 
zstyle ':completion:*' matcher-list '' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}' \
  '+l:|?=** r:|?=**'


# ~~~ Load compsys and one of its fancy modules ~~~
zmodload zsh/complist
autoload -Uz compinit
compinit


zstyle ':completion:*' completer _complete _approximate _extensions _expand_alias   # Define completers
#zstyle ':completion:*:descriptions' format "- %d -"
#zstyle ':completion:*:corrections' format "- %d - (errors %e})"
zstyle ':completion:*:default' list-prompt '%S%M matches%s'
zstyle ':completion:*' group-name ''                                               # Required for completion to be in good groups (named after the tags)
zstyle ':completion:*:manuals' separate-sections true
zstyle ':completion:*:manuals.(^1*)' insert-sections true
zstyle ':completion:*' verbose yes
zstyle ':completion:*' rehash yes
zstyle -e ':completion:*:approximate:*' max-errors \
          'reply=( $(( ($#PREFIX + $#SUFFIX) / 3 )) )'

zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters               # Array completion element sorting.


zstyle ':completion:*:*:*:*:corrections' format '%F{yellow}!- %d (errors: %e) -!%f'
zstyle ':completion:*:*:*:*:descriptions' format '%F{blue}-- %D %d --%f'
zstyle ':completion:*:*:*:*:messages' format ' %F{purple} -- %d --%f'
zstyle ':completion:*:*:*:*:warnings' format ' %F{red}-- no matches found --%f'




zstyle ':completion:*:messages' format ' %F{purple} -- %d --%f'
zstyle ':completion:*:warnings' format ' %F{red}-- no matches found --%f'

# ~~~ Group matches and describe. ~~~
zstyle ':completion:*:*:*:*:*' menu select
zstyle ':completion:*:matches' group 'yes'
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:options' auto-description '%d'
zstyle ':completion:*:corrections' format ' %F{green}-- %d (errors: %e) --%f'
zstyle ':completion:*:descriptions' format ' %F{yellow}-- %d --%f'
zstyle ':completion:*:messages' format ' %F{purple} -- %d --%f'
zstyle ':completion:*:warnings' format ' %F{red}-- no matches found --%f'
zstyle ':completion:*' format ' %F{yellow}-- %d --%f'


# https://thevaluable.dev/zsh-completion-guide-examples/
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}                       # ls
zstyle ':completion:*' file-list all                                                # cd

# ~~~ complete manual by their section ~~~
zstyle ':completion:*:manuals'                      separate-sections true
zstyle ':completion:*:manuals.*'                    insert-sections   true
zstyle ':completion:*:man:*'                        menu yes select

# ~~~ Persistent rehash ~~~
zstyle ':completion:*' rehash true


# ~~~ color ~~~
#zstyle ':completion:*:options' list-colors '=(#b)(--[^ ]#)(*)=30;1;220;1=32;1;216' # 
#zstyle ':completion:*' list-colors '=(#b)(--[^ ]#)(*)=38;5;220;1=38;5;216'          
#zstyle ':completion:*:parameters'  list-colors '=*=32'                             # ParameterGrün
#zstyle ':completion:*:builtins' list-colors '=*=1;38;5;142'                        # builtins gelb
#zstyle ':completion:*:commands' list-colors '=*=1;31'                              #commands in bolded red
#zstyle ':completion:*:aliases' list-colors '=*=2;38;5;128'                         # alias purple
zstyle -e ':completion:*:default' list-colors 'reply=("${PREFIX:+=(#bi)($PREFIX:t)(?)*==34=34}:${(s.:.)LS_COLORS}")'



# ~~~ fzf-tab-completion ~~~
# basic file preview for ls (you can replace with something more sophisticated than head)
zstyle ':completion::*:ls::*' fzf-completion-opts --preview='eval head {1}'

# preview when completing env vars (note: only works for localed variables)
# eval twice, first to unescape the string, second to expand the $variable
zstyle ':completion::*:(-command-|-parameter-|-brace-parameter-|local|unset|expand):*' fzf-completion-opts --preview='eval eval echo {1}'

# preview a `git status` when completing git add
zstyle ':completion::*:git::git,add,*' fzf-completion-opts --preview='git -c color.status=always status --short'

# if other subcommand to git is given, show a git diff or git log
zstyle ':completion::*:git::*,[a-z]*' fzf-completion-opts --preview='
eval set -- {+1}
for arg in "$@"; do
    { git diff --color=always -- "$arg" | git log --color=always "$arg" } 2>/dev/null
done'







# ~~~ host completion /* add brackets as vim can't parse zsh's complex cmdlines 8-) {{{ */ ~~~ 
[ -r ~/.ssh/known_hosts ] && _ssh_hosts=(${${${${(f)"$(<$HOME/.ssh/known_hosts)"}:#[\|]*}%%\ *}%%,*}) || _ssh_hosts=()
[ -r /etc/hosts ] && : ${(A)_etc_hosts:=${(s: :)${(ps:\t:)${${(f)~~"$(</etc/hosts)"}%%\#*}##[:blank:]#[^[:blank:]]#}}} || _etc_hosts=()


# ~~~ Initialize the autocompletion ~~~ 
#autoload -Uz compinit && compinit -i	
#alias protontricks='flatpak run com.github.Matoking.protontricks'
#if [[ ! -f $HOME/.zi/bin/zi.zsh ]]; then
#  print -P "%F{33}▓▒░ %F{160}Installing (%F{33}z-shell/zi%F{160})…%f"
#  command mkdir -p "$HOME/.zi" && command chmod go-rwX "$HOME/.zi"
#  command git clone -q --depth=1 --branch "main" https://github.com/z-shell/zi "$HOME/.zi/bin" && \
#    print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
#    print -P "%F{160}▓▒░ The clone has failed.%f%b"
#fi
#source "$HOME/.zi/bin/zi.zsh"
#autoload -Uz _zi
#(( ${+_comps} )) && _comps[zi]=_zi
# examples here -> https://wiki.zshell.dev/ecosystem/category/-annexes
#zicompinit # <- https://wiki.zshell.dev/docs/guides/commands

# To customize prompt, run `p10k configure` or edit ~/.zsh/.p10k.zsh.
[[ ! -f ~/.zsh/.p10k.zsh ]] || source ~/.zsh/.p10k.zsh
