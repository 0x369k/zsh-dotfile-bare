# BETA  

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zsh/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi



# ~~~ ~/. Default programs ~~~
#[ -n "$DISPLAY" ] && export EDITOR="code"  
#[ -n "$DISPLAY" ] && export VISUAL="code"      
export EDITOR="nano"
#[ -n "$DISPLAY" ] && export MDEDITOR="marktext"        || export BROWSER="nano"
[ -n "$DISPLAY" ] && export BROWSER="firefox"          || export BROWSER="lynx"
[ -n "$DISPLAY" ] && export NB_GUI_BROWSER="firefox"   || export BROWSER="lynx"
[ -n "$DISPLAY" ] && export IMAGEVIEWER="shotwell"     || export BROWSER="shotwell"

# standartmäßig öffnen mit
alias -s {index}="$BROWSER"
alias -s {txt,md}="$MDEDITOR"
alias -s {gif,GIF,jpeg,JPEG,jpg,JPG,png,PNG}="$IMAGEVIEWER"

###################################################################
# ~~~ PATH ~~~ ####################################################
###################################################################
local PATH="/var/lib/flatpak/locals/share:$PATH"
local PATH="$HOME/.local/share/flatpak/locals/share:$PATH"
local PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"
local PATH="$HOME/.local/bin:$PATH "
local PATH="$HOME/.local/go/bin:$PATH"
local PATH="$HOME//bin:$PATH "
local PATH="/usr/local/bin:/bin:/usr/bin:$PATH"
local PATH="/qq/lib/code/shell/snippets:$PATH"
#local ANDROID_HOME=$HOME/Android/Sdk
#local PATH=$PATH:$ANDROID_HOME/tools
#local PATH=$PATH:$ANDROID_HOME/platform-tools

#local PATH="$HOME/.local/bin:$PATH"
#local PATH="/qq/lib/code/shell/snippets:$PATH"
#local PATH="/qq/dev/build/bash:$PATH"

export TERM="xterm-256color" 

export ZSH=${HOME}/.oh-my-zsh
export ZDOTDIR=${HOME}/.zsh

# ~~~ ~/.zsh ~~~
export ZDOTCONFIGDIR=${ZDOTDIR}/config
export ZDOTPLUGINSDIR=${ZDOTDIR}/plugins
export ZFUNC=${ZDOTDIR}/zfunc
export ZCOMPLETION=${ZDOTDIR}/completion

# Load more completions
fpath=($ZDOTDIR/completion $fpath)

# cargo
[ -f "$HOME/.cargo/env" ] && source $HOME/.cargo/env

# navi
[ -d "$HOME/.local/share/navi/cheats/" ] && export NAVI=$HOME/.local/share/navi/cheats/
###################################################################
# ~~~ zi ~~~ ######################################################
###################################################################
if [[ -r "~/.config/zi/init.zsh" ]]; then
  source "~/.config/zi/init.zsh" && zzinit
fi
source ~/.zi/bin/zi.zsh

# ~~~ zsh module benchmark ~~~ ################################
# run "zpmod source-study" 
# To load the module, add following 2 lines to .zshrc, at top:
#    module_path+=( "/home/qgrep/.zi/zmodules/zpmod/Src" )
#    zmodload zi/zpmod
#    zi module build  
#    typeset -g ZI_MOD_DEBUG=1

# ~~~ Profile plugins ~~~
#zi ice atinit'zmodload zsh/zprof' \
#  atload'zprof | head -n 20; zmodload -u zsh/zprof'
# ~~~ zsh module benchmark end ~~~ ###########################

zi light z-shell/F-Sy-H

zi wait lucid for \
  atinit"ZI[COMPINIT_OPTS]=-C; zicompinit; zicdreplay" \
     z-shell/F-Sy-H \
  blockf \
     zsh-users/zsh-completions \
  atload"!_zsh_autosuggest_start" \
     zsh-users/zsh-autosuggestions


# An annex delivers capability install plugins without specifying the GitHub user name.
zi light-mode for z-shell/z-a-unscope


# ~~~ package ~~~
zi pack for fzf
zi pack for fzy 
zi pack for ls_colors
zi pack for system-completions
zi pack for pyenv

zi ice as'program' from'gh-r' sbin'nb'
zi pack for z-shell/nb




##### Oh-My-Zsh #####
# ~~~ clipboard.zsh
#  <command> | clipcopy    - copies stdin to clipboard
#  clipcopy <file>         - copies a file's contents to clipboard
#   clippaste   - writes clipboard's contents to stdout
#   clippaste | <command>    - pastes contents and pipes it to another process
# ~~~ OMZ shorthand syntax:
  zi snippet OMZ::lib/clipboard.zsh
# ~~~ OMZL shorthand syntax:
# zi snippet OMZL::clipboard.zsh


#                                                               # ctrl-o  
  zi is-snippet wait lucid for \
    atload"unalias grv g" \
 OMZP::{git,sudo,dotenv,extract,pip,copypath,copyfile,gh,dirhistory,copybuffer,mosh,nmap,web-search,fzf} \
    if'[[ -d ~/.nvm ]]' \
  OMZP::nvm \
    if'[[ -d ~/.ssh ]]' \
  OMZP::ssh-agent \
    if'[[ -d ~/.gnupg ]]' \
  OMZP::gpg-agent \
    if'[[ "$OSTYPE" = *-gnu ]]' \
  OMZP::gnu-utils \
    has'pip' \
  OMZP::pip \
    has'python' \
  OMZP::python


  
zi ice svn
zi snippet OMZP::gitfast

zi ice as"completion"
zi snippet OMZP::fd/_fd

zi ice as"completion"
zi snippet OMZP::ag/_ag

zi ice as"completion"
zi snippet OMZP::docker/_docker

zi ice as"completion"
zi snippet OMZP::mosh/mosh.plugin.zsh



# ~~~ theme ~~~
zi light-mode for @romkatv/powerlevel10k



zi ice from'gh-r' as'program' sbin'**/exa -> exa' atclone'cp -vf completions/exa.zsh _exa'
zi light ogham/exa

zi ice lucid wait as'program' has'perl' has'convert' pick'exiftool'
zi light exiftool/exiftool

zi ice lucid wait as'program' pick'prettyping' has'ping'
zi light denilsonsa/prettyping

zi light zsh-users/zsh-completions

zi ice wait lucid id-as"auto"
zi load hlissner/zsh-autopair




# To customize prompt, run `p10k configure` or edit ~/.zsh/.p10k.zsh.
[[ ! -f ~/.zsh/.p10k.zsh ]] || source ~/.zsh/.p10k.zsh


for file in $ZDOTCONFIGDIR/**/*(.N); do 
    source "$file" > /dev/null 2>&1 # echo "config file load: $file"
done

for file in ~/.zsh/zfunc/**/*(.N); do 
    source "$file" > /dev/null 2>&1 # && echo "config file load: $file"
done


# all of our zsh filescd 
typeset -U config_files
config_files=(~/.zsh/**/*.zsh)



autoload -Uz compinit
compinit

zi cdreplay -q









  #bindkey
bindkey "^[[1;5D" beginning-of-line       # CTRL + <
bindkey "^[OH"    beginning-of-line       # HOME
bindkey "^[[1;5C" end-of-line             # CTRL + >
bindkey "^[OF"    end-of-line             # END
bindkey "^[[1;3D" backward-word           # ALT  + <
bindkey "^[[1;3C" forward-word            # ALT  + >
bindkey "^[[3~"   delete-char             # DELETE
bindkey "^[[A"    history-search-backward # up   arrow
bindkey "^[[B"    history-search-forward  # down arrow
bindkey "^[[2~"   overwrite-mode          # Insert

bindkey '^[h'     backward-word           # Alt + hd
bindkey '^[l'     forward-word            # Alt + l
bindkey '^[j'     backward-char           # Alt + j
bindkey '^[k'     forward-char            # Alt + k
 
bindkey '^[y'     backward-delete-word    # Alt + y
bindkey '^[o'     delete-word             # Alt + o
bindkey '^[i'     delete-char             # Alt + i

bindkey '^[^H'    backward-delete-word    # Ctrl + h
bindkey '^[^L'    delete-word             # Ctrl + l
bindkey '^[y'     redo                    # Alt + y
bindkey '^[z'     undo                    # Alt + z
bindkey '^L'      clear-screen            # Ctrl + l

# showkey -a  
bindkey '^[[1~' beginning-of-line
bindkey '^[[4~' end-of-line

# aliasexpand   CTRL+A
zle -C alias-expension complete-word _generic
bindkey '^a' alias-expension
zstyle ':completion:alias-expension:*' completer _expand_alias


# Fuzzy-Matching von Vervollständigungen
zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*:match:*' original only
zstyle -e ':completion:*:approximate:*' max-errors 'reply=($((($#PREFIX+$#SUFFIX)/3>7?7:($#PREFIX+$#SUFFIX)/3))numeric)'

# Hübsche Abschlüsse
zstyle ':completion:*:matches' group 'yes'
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:options' auto-description '%d'
zstyle ':completion:*:corrections' format ' %F{green}-- %d (errors: %e) --%f'
zstyle ':completion:*:descriptions' format ' %F{yellow}-- %d --%f'
zstyle ':completion:*:messages' format ' %F{purple} -- %d --%f'
zstyle ':completion:*:warnings' format ' %F{red}-- no matches found --%f'
zstyle ':completion:*:default' list-prompt '%S%M matches%s'
zstyle ':completion:*' format ' %F{yellow}-- %d --%f'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' verbose yes
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*:functions' ignored-patterns '(_*|pre(cmd|exec))'
zstyle ':completion:*' use-cache true
zstyle ':completion:*' rehash true

# menügesteuerte Vervollständigung
zstyle ':completion:*' menu select

# Farbvervollständigung für einige Dinge 
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}







eval "$(atuin init zsh)"
eval "$(navi widget zsh)"
alias dot='git --git-dir=$HOME/.dotfiles --work-tree=$HOME'
