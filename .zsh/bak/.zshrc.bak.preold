# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zsh/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

#################################################################
#                        .zshrc                                 #
#################################################################
# What goes in i                                                #
#  Befehle zum Einrichten von                                   #
#  Aliasen                                                      #
#  Funktionen                                                   #
#  Optionen                                                     #
#  Tastenbelegungen                                             #
#  zur interaktiven Nutzung etc.                                #
#################################################################
export TERM="xterm-256color" 

export ZSH=${HOME}/.oh-my-zsh
export ZDOTDIR=${HOME}/.zsh

# ~~~ ~/.zsh ~~~
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
export ZDOTCONFIGDIR=${ZDOTDIR}/config
export ZDOTPLUGINSDIR=${ZDOTDIR}/plugins
export ZFUNC=${ZDOTDIR}/zfunc
export ZCOMPLETION=${ZDOTDIR}/completion

# ~~~ ~/. Default programs ~~~
[ -n "$DISPLAY" ] && export EDITOR="code"  
[ -n "$DISPLAY" ] && export VISUAL="code"      
[ -n "$DISPLAY" ] && export MDEDITOR="marktext"        || export BROWSER="nano"
[ -n "$DISPLAY" ] && export BROWSER="firefox"          || export BROWSER="lynx"
[ -n "$DISPLAY" ] && export NB_GUI_BROWSER="firefox"   || export BROWSER="lynx"
[ -n "$DISPLAY" ] && export IMAGEVIEWER="shotwell"     || export BROWSER="shotwell"



# standartmäßig öffnen mit
alias -s {index}="$BROWSER"
alias -s {txt,md}="$MDEDITOR"
alias -s {gif,GIF,jpeg,JPEG,jpg,JPG,png,PNG}="$IMAGEVIEWER"


for file in $ZDOTCONFIGDIR/**/*(.N); do 
    source "$file" > /dev/null 2>&1 # echo "config file load: $file"
done

for file in ~/.zsh/zfunc/**/*(.N); do 
    source "$file" > /dev/null 2>&1 # && echo "config file load: $file"
done

# all of our zsh filescd 
typeset -U config_files
config_files=(~/.zsh/**/*.zsh)



#typeset -g ZI_MOD_DEBUG=1
typeset -A ZI
ZI[BIN_DIR]="${HOME}/.zi/bin"
source "${ZI[BIN_DIR]}/zi.zsh"

autoload -Uz _zi
(( ${+_comps} )) && _comps[zi]=_zi

zi ice depth"1"
zi light romkatv/powerlevel10k
#zi light-mode for @romkatv

zi ice from'gh-r' as'program' sbin'**/exa -> exa' atclone'cp -vf completions/exa.zsh _exa'
zi light ogham/exa
zi ice lucid wait as'program' has'bat' pick'src/*'
zi light eth-p/bat-extras
zi ice lucid wait as'program' has'perl' has'convert' pick'exiftool'
zi light exiftool/exiftool
zi ice if'[ -z "$SSH_CONNECTION" ]' lucid wait \
  as'program' has'perl' pick'inxi'
zi light smxi/inxi
zi ice lucid wait as'program' pick'prettyping' has'ping'
zi light denilsonsa/prettyping
zi ice lucid wait as'program' has'mogrify'
zi light hackerb9/lsix
zi ice lucid wait as'program' has'tmux' pick'bin/xpanes'
zi light greymd/tmux-xpanes
zi ice wait lucid as'program' pick'$ZPFX/bin/git-*' make'PREFIX=$ZPFX' nocompile
zi light tj/git-extras
zi for as'program' nocompile'!' depth'1' \
  has'python' pick'$ZPFX/bin/youtube-dl*' make'!PREFIX=$ZPFX install' \
  atclone'ln -sfv youtube-dl.zsh _youtube-dl' atpull'%atclone' \
    ytdl-org/youtube-dl
    zi ice blockf
zi light zsh-users/zsh-completions


# zi ice 
zi ice wait lucid
zi load urbainvaes/fzf-marks
zi ice wait lucid has'fzf' pick'fzf-finder.plugin.zsh'
zi light leophys/zsh-plugin-fzf-finder

zstyle ":plugin:zsh-startify:shellutils" size 5  # The size of the recently used file list (default: 5)
zstyle ":plugin:zsh-startify:vim" size 5         # The size of the recently opened in Vim list (default: 5)

zi ice as"completion"
zi snippet OMZP::docker/_docker

zi ice as"completion"
zi snippet OMZP::fd/_fd

zi ice as"completion"
zi snippet OMZP::ag/_ag
#zi ice pick"async.zsh" src"pure.zsh"
#zi light sindresorhus/pure
zi ice from"gh-r" as"program"
zi light junegunn/fzf
#zi ice depth"1"
#zi light romkatv/powerlevel10k
#zi ice depth=1; zi light romkatv/powerlevel10k
#zinit light-mode depth=1 for \
#spaceship-prompt/spaceship-prompt \
#     romkatv/powerlevel10k \
#             OMZL::history.zsh \
#        blockf OMZL::completion.zsh
  zi light zsh-users/zsh-autosuggestions
  #zi light ellie/atuin
  zi light zdharma/fast-syntax-highlighting


# bindkey
bindkey "^[[1;5D" beginning-of-line       # CTRL + <
bindkey "^[OH"    beginning-of-line       # HOME
bindkey "^[[1;5C" end-of-line             # CTRL + >
bindkey "^[OF"    end-of-line             # END
bindkey "^[[1;3D" backward-word           # ALT  + <
bindkey "^[[1;3C" forward-word            # ALT  + >
bindkey "^[[3~"   delete-char             # DELETE
bindkey "^[[A"    history-search-backward # up   arrow
bindkey "^[[B"    history-search-forward  # down arrow
bindkey "^[[2~"   overwrite-mode          # Insert

bindkey '^[h'     backward-word           # Alt + h
bindkey '^[l'     forward-word            # Alt + l
bindkey '^[j'     backward-char           # Alt + j
bindkey '^[k'     forward-char            # Alt + k
 
bindkey '^[y'     backward-delete-word    # Alt + y
bindkey '^[o'     delete-word             # Alt + o
bindkey '^[u'     backward-delete-char    # Alt + u
bindkey '^[i'     delete-char             # Alt + i

bindkey '^[^H'    backward-delete-word    # Ctrl + h
bindkey '^[^L'    delete-word             # Ctrl + l
bindkey '^[y'     redo                    # Alt + y
bindkey '^[z'     undo                    # Alt + z
bindkey '^L'      clear-screen            # Ctrl + l

# showkey -a  
bindkey '^[[1~' beginning-of-line
bindkey '^[[4~' end-of-line


# atuin
eval "$(atuin init zsh)"
bindkey '^r' _atuin_search_widget
bindkey '^[[A' _atuin_search_widget
bindkey '^[OA' _atuin_search_widget
export ATUIN_NOBIND="true"


# oh-my-posh theme
#if [[  -f ~/.poshthemes/kushal.omp.json ]]; then 
# eval "$(oh-my-posh --init --shell zsh --config ~/.poshthemes/kushal.omp.json)" 
#fi
#export ZSH_THEME="powerlevel10k/powerlevel10k"


# p10
# Sofortige Powerlevel10k-Eingabeaufforderung aktivieren.
# Sollte nahe am Anfang von ~/.zshrc bleiben.
# Initialisierungscode, der möglicherweise eine Konsoleneingabe erfordert (Passwortabfragen, [y/n]
# Bestätigungen usw.) müssen über diesen Block gehen;  alles andere kann unten stehen.
#[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
#if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
#  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
#fi
#typeset -g POWERLEVEL9K_INSTANT_PROMPT=off

# Initialize the autocompletion
autoload -Uz compinit && compinit -i	


plugins=(
  adb
  ag
  aliases           #acs
  alias-finder
  git 
  sudo
  pip               #The pip plugin caches the names of available pip packages from the PyPI index run for directly cache   $ zsh-pip-cache-packages
  copypath
  copyfile
  gh
  extract
  copybuffer
  dirhistory
  tmux
  tmux-cssh
  extract
  tmuxinator
  nanoc
  ufw
  catimg
  copybuffer        # ctrl-o
  rsync
  mosh
  nmap
  emoji
  docker
  adb
  tig               # git status
  ag
  fd
  web-search
 # zsh-interactive-cd
  adb
  git
  bundler
  dotenv
  rake
  rbenv
  ruby
  npm 
  fzf
)
source $ZSH/oh-my-zsh.sh

export ZSH_COMPDUMP=$ZSH/cache/.zcompdump-$HOST
# cache 
zstyle ':completion:*' accept-exact '*(N)'
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path "$ZSH/cache/.zcompdump-$HOST"





# VSCode
#if [[ $TERM_PROGRAM == "vscode" ]]; then
  # start a tmux session
#  if [[ $VSCODE_TERM_PROFILE == "tmux" ]]; then
#    if [ -z "$TMUX" ]; then
#      $HOME/.dotfiles/scripts/tmux-folder-session.sh
#    fi
#  fi
#fi

# aliasexpand   CTRL+A
zle -C alias-expension complete-word _generic
bindkey '^a' alias-expension
zstyle ':completion:alias-expension:*' completer _expand_alias

# Abschluss ohne Berücksichtigung der Groß-/Kleinschreibung 
zstyle ':completion:*' matcher-list 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]} l:|=* r:|=*' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]} l:|=* r:|=*' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]} l:|=* r:|=*'

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
  zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Autocomplete
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#073642,bg=#839496,bold,underline"
ZSH_AUTOSUGGEST_STRATEGY=(history completion)

# Highlight the current autocomplete option
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"

# Better SSH/Rsync/SCP Autocomplete
zstyle ':completion:*:(scp|rsync):*' tag-order ' hosts:-ipaddr:ip\ address hosts:-host:host files'
zstyle ':completion:*:(ssh|scp|rsync):*:hosts-host' ignored-patterns '*(.|:)*' loopback ip6-loopback localhost ip6-localhost broadcasthost
zstyle ':completion:*:(ssh|scp|rsync):*:hosts-ipaddr' ignored-patterns '^(<->.<->.<->.<->|(|::)([[:xdigit:].]##:(#c,2))##(|%*))' '127.0.0.<->' '255.255.255.255' '::1' 'fe80::*'

# fzf -tab gänge configs
# disable sort when completing `git checkout`
  #zstyle ':completion:*:git-checkout:*' sort false
# set descriptions format to enable group support
  #zstyle ':completion:*:descriptions' format '[%d]'
# set list-colors to enable filename colorizing
  zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
# preview directory's content with exa when completing cd
  zstyle ':fzf-tab:complete:cd:*' fzf-preview 'exa -1 --color=always $realpath'
# switch group using `,` and `.`
  zstyle ':fzf-tab:*' switch-group ',' '.'

# Allow for autocomplete to be case insensitive
zstyle ':completion:*' matcher-list '' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}' \
  '+l:|?=** r:|?=**'


# Load compsys and one of its fancy modules
zmodload zsh/complist
autoload -Uz compinit
compinit


zstyle ':completion:*' completer _complete _approximate _extensions _expand_alias   # Define completers
#zstyle ':completion:*:descriptions' format "- %d -"
#zstyle ':completion:*:corrections' format "- %d - (errors %e})"
zstyle ':completion:*:default' list-prompt '%S%M matches%s'
zstyle ':completion:*' group-name ''                                               # Required for completion to be in good groups (named after the tags)
zstyle ':completion:*:manuals' separate-sections true
zstyle ':completion:*:manuals.(^1*)' insert-sections true
zstyle ':completion:*' verbose yes
zstyle ':completion:*' rehash yes
zstyle -e ':completion:*:approximate:*' max-errors \
          'reply=( $(( ($#PREFIX + $#SUFFIX) / 3 )) )'

zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters               # Array completion element sorting.


zstyle ':completion:*:*:*:*:corrections' format '%F{yellow}!- %d (errors: %e) -!%f'
zstyle ':completion:*:*:*:*:descriptions' format '%F{blue}-- %D %d --%f'
zstyle ':completion:*:*:*:*:messages' format ' %F{purple} -- %d --%f'
zstyle ':completion:*:*:*:*:warnings' format ' %F{red}-- no matches found --%f'

zstyle ':completion:*:messages' format ' %F{purple} -- %d --%f'
zstyle ':completion:*:warnings' format ' %F{red}-- no matches found --%f'

# Group matches and describe.
zstyle ':completion:*:*:*:*:*' menu select
zstyle ':completion:*:matches' group 'yes'
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:options' auto-description '%d'
zstyle ':completion:*:corrections' format ' %F{green}-- %d (errors: %e) --%f'
zstyle ':completion:*:descriptions' format ' %F{yellow}-- %d --%f'
zstyle ':completion:*:zshmessages' format ' %F{purple} -- %d --%f'
zstyle ':completion:*:warnings' format ' %F{red}-- no matches found --%f'
zstyle ':completion:*' format ' %F{yellow}-- %d --%f'

# https://thevaluable.dev/zsh-completion-guide-examples/
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}                       # ls
zstyle ':completion:*' file-list all                                                # cd

# complete manual by their section
zstyle ':completion:*:manuals'                      separate-sections true
zstyle ':completion:*:manuals.*'                    insert-sections   true
zstyle ':completion:*:man:*'                        menu yes select

# Persistent rehash
zstyle ':completion:*' rehash true

# color
#zstyle ':completion:*:options' list-colors '=(#b)(--[^ ]#)(*)=30;1;220;1=32;1;216' # 
#zstyle ':completion:*' list-colors '=(#b)(--[^ ]#)(*)=38;5;220;1=38;5;216'          
#zstyle ':completion:*:parameters'  list-colors '=*=32'                             # ParameterGrün
#zstyle ':completion:*:builtins' list-colors '=*=1;38;5;142'                        # builtins gelb
#zstyle ':completion:*:commands' list-colors '=*=1;31'                              #commands in bolded red
#zstyle ':completion:*:aliases' list-colors '=*=2;38;5;128'                         # alias purple
zstyle -e ':completion:*:default' list-colors 'reply=("${PREFIX:+=(#bi)($PREFIX:t)(?)*==34=34}:${(s.:.)LS_COLORS}")'

# host completion /* add brackets as vim can't parse zsh's complex cmdlines 8-) {{{ */
[ -r ~/.ssh/known_hosts ] && _ssh_hosts=(${${${${(f)"$(<$HOME/.ssh/known_hosts)"}:#[\|]*}%%\ *}%%,*}) || _ssh_hosts=()
[ -r /etc/hosts ] && : ${(A)_etc_hosts:=${(s: :)${(ps:\t:)${${(f)~~"$(</etc/hosts)"}%%\#*}##[:blank:]#[^[:blank:]]#}}} || _etc_hosts=()


# bindkey
bindkey "^[[1;5D" beginning-of-line       # CTRL + <
bindkey "^[OH"    beginning-of-line       # HOME
bindkey "^[[1;5C" end-of-line             # CTRL + >
bindkey "^[OF"    end-of-line             # END
bindkey "^[[1;3D" backward-word           # ALT  + <
bindkey "^[[1;3C" forward-word            # ALT  + >
bindkey "^[[3~"   delete-char             # DELETE
bindkey "^[[A"    history-search-backward # up   arrow
bindkey "^[[B"    history-search-forward  # down arrow
bindkey "^[[2~"   overwrite-mode          # Insert

bindkey '^[h'     backward-word           # Alt + h
bindkey '^[l'     forward-word            # Alt + l
bindkey '^[j'     backward-char           # Alt + j
bindkey '^[k'     forward-char            # Alt + k
 
bindkey '^[y'     backward-delete-word    # Alt + y
bindkey '^[o'     delete-word             # Alt + o
bindkey '^[u'     backward-delete-char    # Alt + u
bindkey '^[i'     delete-char             # Alt + i

bindkey '^[^H'    backward-delete-word    # Ctrl + h
bindkey '^[^L'    delete-word             # Ctrl + l
bindkey '^[y'     redo                    # Alt + y
bindkey '^[z'     undo                    # Alt + z
bindkey '^L'      clear-screen            # Ctrl + l

# showkey -a  
bindkey '^[[1~' beginning-of-line
bindkey '^[[4~' end-of-line


# atuin
eval "$(atuin init zsh)"
bindkey '^r' _atuin_search_widget
bindkey '^[[A' _atuin_search_widget
bindkey '^[OA' _atuin_search_widget
export ATUIN_NOBIND="true"


eval "$(navi widget zsh)"




# To customize prompt, run `p10k configure` or edit ~/.zsh/.p10k.zsh.
[[ ! -f ~/.zsh/.p10k.zsh ]] || source ~/.zsh/.p10k.zsh
POWERLEVEL9K_DISABLE_CONFIGURATION_WIZARD=true
